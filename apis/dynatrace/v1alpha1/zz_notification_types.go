/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnsibleTowerObservation struct {
}

type AnsibleTowerParameters struct {

	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	// +kubebuilder:validation:Required
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate,omitempty"`

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The custom message of the notification.   This message will be displayed in the extra variables **Message** field of your job template.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	CustomMessage *string `json:"customMessage" tf:"custom_message,omitempty"`

	// The ID of the target Ansible Tower job template
	// +kubebuilder:validation:Required
	JobTemplateID *float64 `json:"jobTemplateId" tf:"job_template_id,omitempty"`

	// The URL of the target Ansible Tower job template
	// +kubebuilder:validation:Required
	JobTemplateURL *string `json:"jobTemplateUrl" tf:"job_template_url,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The password for the Ansible Tower account
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// The username of the Ansible Tower account
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type EmailObservation struct {
}

type EmailParameters struct {

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The list of the email BCC-recipients
	// +kubebuilder:validation:Optional
	BccReceivers []*string `json:"bccReceivers,omitempty" tf:"bcc_receivers,omitempty"`

	// The template of the email notification.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	Body *string `json:"body" tf:"body,omitempty"`

	// The list of the email CC-recipients
	// +kubebuilder:validation:Optional
	CcReceivers []*string `json:"ccReceivers,omitempty" tf:"cc_receivers,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The list of the email recipients
	// +kubebuilder:validation:Optional
	Receivers []*string `json:"receivers,omitempty" tf:"receivers,omitempty"`

	// The subject of the email notifications
	// +kubebuilder:validation:Required
	Subject *string `json:"subject" tf:"subject,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type HeaderObservation struct {
}

type HeaderParameters struct {

	// The name of the HTTP header
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type HipchatObservation struct {
}

type HipchatParameters struct {

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	Message *string `json:"message" tf:"message,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The URL of the HipChat WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type JiraObservation struct {
}

type JiraParameters struct {

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The description of the Jira issue to be created by this notification.   You can use same placeholders as in issue summary
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// The type of the Jira issue to be created by this notification
	// +kubebuilder:validation:Required
	IssueType *string `json:"issueType" tf:"issue_type,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The password for the Jira profile
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// The project key of the Jira issue to be created by this notification
	// +kubebuilder:validation:Required
	ProjectKey *string `json:"projectKey" tf:"project_key,omitempty"`

	// The summary of the Jira issue to be created by this notification.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	Summary *string `json:"summary" tf:"summary,omitempty"`

	// The URL of the Jira API endpoint
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// The username of the Jira profile
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type NotificationConfigObservation struct {
}

type NotificationConfigParameters struct {

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Defines the actual set of fields depending on the value. See one of the following objects:  * `EMAIL` -> EmailNotificationConfig  * `PAGER_DUTY` -> PagerDutyNotificationConfig  * `WEBHOOK` -> WebHookNotificationConfig  * `SLACK` -> SlackNotificationConfig  * `HIPCHAT` -> HipChatNotificationConfig  * `VICTOROPS` -> VictorOpsNotificationConfig  * `SERVICE_NOW` -> ServiceNowNotificationConfig  * `XMATTERS` -> XMattersNotificationConfig  * `ANSIBLETOWER` -> AnsibleTowerNotificationConfig  * `OPS_GENIE` -> OpsGenieNotificationConfig  * `JIRA` -> JiraNotificationConfig  * `TRELLO` -> TrelloNotificationConfig
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type NotificationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NotificationParameters struct {

	// Configuration for Ansible Tower Notification
	// +kubebuilder:validation:Optional
	AnsibleTower []AnsibleTowerParameters `json:"ansibleTower,omitempty" tf:"ansible_tower,omitempty"`

	// Configuration for Generic Notification
	// +kubebuilder:validation:Optional
	Config []NotificationConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Configuration for Email Notification
	// +kubebuilder:validation:Optional
	Email []EmailParameters `json:"email,omitempty" tf:"email,omitempty"`

	// Configuration for HipChat Notification
	// +kubebuilder:validation:Optional
	Hipchat []HipchatParameters `json:"hipchat,omitempty" tf:"hipchat,omitempty"`

	// Configuration for Jira Notification
	// +kubebuilder:validation:Optional
	Jira []JiraParameters `json:"jira,omitempty" tf:"jira,omitempty"`

	// Configuration for OpsGenie Notification
	// +kubebuilder:validation:Optional
	OpsGenie []OpsGenieParameters `json:"opsGenie,omitempty" tf:"ops_genie,omitempty"`

	// Configuration for PagerDuty Notification
	// +kubebuilder:validation:Optional
	PagerDuty []PagerDutyParameters `json:"pagerDuty,omitempty" tf:"pager_duty,omitempty"`

	// Configuration for ServiceNow Notification
	// +kubebuilder:validation:Optional
	ServiceNow []ServiceNowParameters `json:"serviceNow,omitempty" tf:"service_now,omitempty"`

	// Configuration for Slack Notification
	// +kubebuilder:validation:Optional
	Slack []SlackParameters `json:"slack,omitempty" tf:"slack,omitempty"`

	// Configuration for Trello Notification
	// +kubebuilder:validation:Optional
	Trello []TrelloParameters `json:"trello,omitempty" tf:"trello,omitempty"`

	// Configuration for VictorOps Notification
	// +kubebuilder:validation:Optional
	VictorOps []VictorOpsParameters `json:"victorOps,omitempty" tf:"victor_ops,omitempty"`

	// Configuration for WebHook Notification
	// +kubebuilder:validation:Optional
	WebHook []WebHookParameters `json:"webHook,omitempty" tf:"web_hook,omitempty"`

	// Configuration for XMatters Notification
	// +kubebuilder:validation:Optional
	Xmatters []XmattersParameters `json:"xmatters,omitempty" tf:"xmatters,omitempty"`
}

type OpsGenieObservation struct {
}

type OpsGenieParameters struct {

	// The API key to access OpsGenie
	// +kubebuilder:validation:Optional
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The region domain of the OpsGenie
	// +kubebuilder:validation:Required
	Domain *string `json:"domain" tf:"domain,omitempty"`

	// The content of the message.  You can use the following placeholders:  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem
	// +kubebuilder:validation:Required
	Message *string `json:"message" tf:"message,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type PagerDutyObservation struct {
}

type PagerDutyParameters struct {

	// The name of the PagerDuty account
	// +kubebuilder:validation:Required
	Account *string `json:"account" tf:"account,omitempty"`

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The API key to access PagerDuty
	// +kubebuilder:validation:Optional
	ServiceAPIKey *string `json:"serviceApiKey,omitempty" tf:"service_api_key,omitempty"`

	// The name of the service
	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type ServiceNowObservation struct {
}

type ServiceNowParameters struct {

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The ServiceNow instance identifier. It refers to the first part of your own ServiceNow URL.   This field is mutually exclusive with the **url** field. You can only use one of them
	// +kubebuilder:validation:Optional
	InstanceName *string `json:"instanceName,omitempty" tf:"instance_name,omitempty"`

	// The content of the ServiceNow description.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	Message *string `json:"message" tf:"message,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The username to the ServiceNow account
	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// Send events into ServiceNow ITOM (`true`)
	// +kubebuilder:validation:Required
	SendEvents *bool `json:"sendEvents" tf:"send_events,omitempty"`

	// Send incidents into ServiceNow ITSM (`true`)
	// +kubebuilder:validation:Required
	SendIncidents *bool `json:"sendIncidents" tf:"send_incidents,omitempty"`

	// The URL of the on-premise ServiceNow installation.   This field is mutually exclusive with the **instanceName** field. You can only use one of them
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`

	// The username of the ServiceNow account.   Make sure that your user account has the `rest_service`, `web_request_admin`, and `x_dynat_ruxit.Integration` roles
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type SlackObservation struct {
}

type SlackParameters struct {

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The channel (for example, `#general`) or the user (for example, `@john.smith`) to send the message to
	// +kubebuilder:validation:Required
	Channel *string `json:"channel" tf:"channel,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	Title *string `json:"title" tf:"title,omitempty"`

	// The URL of the Slack WebHook.  This is confidential information, therefore GET requests return this field with the `null` value, and it is optional for PUT requests
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type TrelloObservation struct {
}

type TrelloParameters struct {

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The application key for the Trello account
	// +kubebuilder:validation:Required
	ApplicationKey *string `json:"applicationKey" tf:"application_key,omitempty"`

	// The application token for the Trello account
	// +kubebuilder:validation:Optional
	AuthorizationToken *string `json:"authorizationToken,omitempty" tf:"authorization_token,omitempty"`

	// The Trello board to which the card should be assigned
	// +kubebuilder:validation:Required
	BoardID *string `json:"boardId" tf:"board_id,omitempty"`

	// The description of the Trello card.   You can use same placeholders as in card text
	// +kubebuilder:validation:Required
	Description *string `json:"description" tf:"description,omitempty"`

	// The Trello list to which the card should be assigned
	// +kubebuilder:validation:Required
	ListID *string `json:"listId" tf:"list_id,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The Trello list to which the card of the resolved problem should be assigned
	// +kubebuilder:validation:Required
	ResolvedListID *string `json:"resolvedListId" tf:"resolved_list_id,omitempty"`

	// The text of the generated Trello card.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	Text *string `json:"text" tf:"text,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type VictorOpsObservation struct {
}

type VictorOpsParameters struct {

	// The API key for the target VictorOps account
	// +kubebuilder:validation:Optional
	APIKey *string `json:"apiKey,omitempty" tf:"api_key,omitempty"`

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// The content of the message.  You can use the following placeholders:  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`
	// +kubebuilder:validation:Required
	Message *string `json:"message" tf:"message,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The routing key, defining the group to be notified
	// +kubebuilder:validation:Required
	RoutingKey *string `json:"routingKey" tf:"routing_key,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type WebHookObservation struct {
}

type WebHookParameters struct {

	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	// +kubebuilder:validation:Required
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate,omitempty"`

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// A list of the additional HTTP headers
	// +kubebuilder:validation:Optional
	Header []HeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// Call webhook if new events merge into existing problems
	// +kubebuilder:validation:Optional
	NotifyEventMerges *bool `json:"notifyEventMerges,omitempty" tf:"notify_event_merges,omitempty"`

	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	Payload *string `json:"payload" tf:"payload,omitempty"`

	// The URL of the WebHook endpoint
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

type XmattersHeaderObservation struct {
}

type XmattersHeaderParameters struct {

	// The name of the HTTP header
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The value of the HTTP header. May contain an empty value.   Required when creating a new notification.  For the **Authorization** header, GET requests return the `null` value.  If you want update a notification configuration with an **Authorization** header which you want to remain intact, set the **Authorization** header with the `null` value
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type XmattersObservation struct {
}

type XmattersParameters struct {

	// Accept any, including self-signed and invalid, SSL certificate (`true`) or only trusted (`false`) certificates
	// +kubebuilder:validation:Required
	AcceptAnyCertificate *bool `json:"acceptAnyCertificate" tf:"accept_any_certificate,omitempty"`

	// The configuration is enabled (`true`) or disabled (`false`)
	// +kubebuilder:validation:Required
	Active *bool `json:"active" tf:"active,omitempty"`

	// The ID of the associated alerting profile
	// +kubebuilder:validation:Required
	AlertingProfile *string `json:"alertingProfile" tf:"alerting_profile,omitempty"`

	// A list of the additional HTTP headers
	// +kubebuilder:validation:Optional
	Header []XmattersHeaderParameters `json:"header,omitempty" tf:"header,omitempty"`

	// The name of the notification configuration
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// The content of the notification message.  You can use the following placeholders:  * `{ImpactedEntities}`: Details about the entities impacted by the problem in form of a JSON array.  * `{ImpactedEntity}`: The entity impacted by the problem or *X* impacted entities.  * `{PID}`: The ID of the reported problem.  * `{ProblemDetailsHTML}`: All problem event details, including root cause, as an HTML-formatted string.  * `{ProblemDetailsJSON}`: All problem event details, including root cause, as a JSON object.  * `{ProblemDetailsMarkdown}`: All problem event details, including root cause, as a [Markdown-formatted](https://www.markdownguide.org/cheat-sheet/) string.  * `{ProblemDetailsText}`: All problem event details, including root cause, as a text-formatted string.  * `{ProblemID}`: The display number of the reported problem.  * `{ProblemImpact}`: The [impact level](https://www.dynatrace.com/support/help/shortlink/impact-analysis) of the problem. Possible values are `APPLICATION`, `SERVICE`, and `INFRASTRUCTURE`.  * `{ProblemSeverity}`: The [severity level](https://www.dynatrace.com/support/help/shortlink/event-types) of the problem. Possible values are `AVAILABILITY`, `ERROR`, `PERFORMANCE`, `RESOURCE_CONTENTION`, and `CUSTOM_ALERT`.  * `{ProblemTitle}`: A short description of the problem.  * `{ProblemURL}`: The URL of the problem within Dynatrace.  * `{State}`: The state of the problem. Possible values are `OPEN` and `RESOLVED`.  * `{Tags}`: The list of tags that are defined for all impacted entities, separated by commas
	// +kubebuilder:validation:Required
	Payload *string `json:"payload" tf:"payload,omitempty"`

	// The URL of the xMatters WebHook
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// allows for configuring properties that are not explicitly supported by the current version of this provider
	// +kubebuilder:validation:Optional
	Unknowns *string `json:"unknowns,omitempty" tf:"unknowns,omitempty"`
}

// NotificationSpec defines the desired state of Notification
type NotificationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotificationParameters `json:"forProvider"`
}

// NotificationStatus defines the observed state of Notification.
type NotificationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Notification is the Schema for the Notifications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,dynatracejet}
type Notification struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationSpec   `json:"spec"`
	Status            NotificationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationList contains a list of Notifications
type NotificationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Notification `json:"items"`
}

// Repository type metadata.
var (
	Notification_Kind             = "Notification"
	Notification_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Notification_Kind}.String()
	Notification_KindAPIVersion   = Notification_Kind + "." + CRDGroupVersion.String()
	Notification_GroupVersionKind = CRDGroupVersion.WithKind(Notification_Kind)
)

func init() {
	SchemeBuilder.Register(&Notification{}, &NotificationList{})
}
